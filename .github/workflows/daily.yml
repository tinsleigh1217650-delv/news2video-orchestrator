name: daily-news-to-youtube

on:
  schedule:
    - cron: "0 10 * * *"   # 17:00 VN mỗi ngày
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: news2video-daily
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout Orchestrator (repo A)
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Sanity: token có quyền đọc repo Engine
      - name: Sanity check ENGINE_TOKEN can read Engine repo
        env:
          ENGINE_REPO: tinsleigh1217650-delv/news2video-engine   # ĐỔI nếu repo engine khác
          GH_TOKEN: ${{ secrets.ENGINE_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/$ENGINE_REPO > repo.json
          python - <<'PY'
          import json
          j=json.load(open('repo.json'))
          print("full_name:", j.get('full_name'))
          print("private:", j.get('private'))
          print("default_branch:", j.get('default_branch'))
          PY

      # Checkout Engine (repo B - PRIVATE) vào engine/
      - name: Checkout private engine
        uses: actions/checkout@v4
        with:
          repository: tinsleigh1217650-delv/news2video-engine   # ĐỔI nếu cần
          token: ${{ secrets.ENGINE_TOKEN }}
          path: engine
          ref: main
          fetch-depth: 1
          submodules: false

      # Cache pip / huggingface / piper
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('engine/requirements.txt') }}

      - name: Cache huggingface
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hf-${{ hashFiles('engine/requirements.txt') }}

      - name: Cache piper
        uses: actions/cache@v4
        with:
          path: ~/.local/share/piper-tts
          key: ${{ runner.os }}-piper-${{ hashFiles('engine/src/tts_piper_segments.py') }}

      # System deps + Python deps
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak jq

      - name: Install Python deps
        run: |
          pip install -r engine/requirements.txt
          pip install beautifulsoup4 feedparser lxml
          python - <<'PY'
          import sys
          try:
              import moviepy, PIL, requests, bs4, feedparser, lxml
              print("moviepy:", moviepy.__version__)
          except Exception as e:
              print("PY DEPS CHECK FAILED:", e); sys.exit(1)
          PY

      # ====== Vá BOM & ép mọi nơi dùng utf-8-sig ======
      - name: Strip BOM from jp_sources.json (surgical fix)
        run: |
          python - <<'PY'
          import json
          p='engine/feeds/jp_sources.json'
          data=json.load(open(p,'r',encoding='utf-8-sig'))  # nuốt BOM nếu có
          open(p,'w',encoding='utf-8').write(json.dumps(data, ensure_ascii=False, indent=2))  # ghi lại KHÔNG BOM
          print("BOM stripped:", p)
          PY

      - name: Force utf-8-sig in any code that reads jp_sources.json
        run: |
          set -e
          files=$(grep -RIl "jp_sources.json" engine || true)
          echo "Files referencing jp_sources.json:"
          echo "$files"
          for f in $files; do
            # thay mọi 'encoding="utf-8"' thành 'encoding="utf-8-sig"' trong file đó
            sed -i -E 's/encoding\s*=\s*["'\'']utf-8["'\'']/encoding="utf-8-sig"/g' "$f" || true
          done
          echo "=== Preview lines ==="
          grep -RInE 'jp_sources\.json|utf-8-sig' engine || true

      # Debug cây file + JSON nguồn
      - name: Debug JP sources JSON (must be valid)
        run: |
          echo "=== engine/feeds/jp_sources.json ==="
          cat engine/feeds/jp_sources.json
          python - <<'PY'
          import json
          j=json.load(open('engine/feeds/jp_sources.json','r',encoding='utf-8-sig'))
          print("sources:", len(j.get('sources',[])))
          assert len(j.get('sources',[]))>0
          PY

      # BẮT BUỘC: có đủ secrets trước khi render
      - name: Check YouTube secrets presence
        run: |
          test -n "${{ secrets.GOOGLE_CLIENT_ID }}" || (echo "Missing GOOGLE_CLIENT_ID" && exit 1)
          test -n "${{ secrets.GOOGLE_CLIENT_SECRET }}" || (echo "Missing GOOGLE_CLIENT_SECRET" && exit 1)
          test -n "${{ secrets.YT_REFRESH_TOKEN }}" || (echo "Missing YT_REFRESH_TOKEN" && exit 1)

      # Verify YouTube auth (tokeninfo)
      - name: Verify YouTube auth (tokeninfo)
        continue-on-error: true
        env:
          CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          RESP=$(curl -sS -X POST https://oauth2.googleapis.com/token \
            -d client_id="$CLIENT_ID" \
            -d client_secret="$CLIENT_SECRET" \
            -d refresh_token="$REFRESH_TOKEN" \
            -d grant_type=refresh_token)
          ACCESS=$(echo "$RESP" | jq -r '.access_token // empty')
          if [ -z "$ACCESS" ]; then
            echo "WARN: cannot refresh access token now"; exit 0
          fi
          echo "=== tokeninfo ==="
          curl -sS "https://oauth2.googleapis.com/tokeninfo?access_token=$ACCESS" | jq .

      # === PREFLIGHT: phải có >= 1 bài hợp lệ (>=3 ảnh) ===
      - name: Preflight JP sources (must find >=1 article with >=3 images)
        working-directory: engine
        env:
          PYTHONPATH: ${{ github.workspace }}/engine
          FEED_MODE: "JP"
          MIN_IMAGES: "3"
        run: |
          python tools/preflight_jp.py

      # Chạy pipeline Engine (CHỈ khi preflight OK)
      - name: Run pipeline (Natural Voice First)
        working-directory: engine
        env:
          PYTHONPATH: ${{ github.workspace }}/engine

          # OAuth YouTube
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # Upload private để duyệt
          YT_PRIVACY: "private"

          # Nhật + yêu cầu >= 3 ảnh, chặn fallback
          FEED_MODE: "JP"
          MIN_IMAGES: "3"
          ALLOW_FALLBACK: "0"

          # Voices & audio
          PIPER_EN_VOICE: en_US-libritts-high
          PIPER_HOST_VOICE: en_US-lessac-medium
          AUTO_LENGTH_SCALE: "false"
          PIPER_LENGTH_SCALE_BASE: "1.02"
          HOST_LENGTH_SCALE: "1.06"
          PAUSE_AFTER_INTRO: "0.6"
          PAUSE_BETWEEN_SEGS: "0.35"
          LOUDNORM_I: "-14"
          LOUDNORM_TP: "-1.5"
          LOUDNORM_LRA: "11"
          USE_DEESSER: "true"
          MUSIC_BED_DB: "-28"

          # Pipeline
          MAX_IMAGES: 12
          MAX_DAILY_VIDEOS: 1
          PICK_WINDOW: 20
        run: python run.py

      # GUARD: nếu còn rơi NASA thì fail để tránh video đen
      - name: Guard: fail if NASA fallback used
        if: always()
        run: |
          set -e
          if find engine/output -maxdepth 2 -type d -name "nasa-developed-printable-metal-can-take-the-heat" | grep -q .; then
            echo "::error::NASA fallback detected -> failing job to avoid black video."
            exit 1
          fi

      # Thu thập artifact (debug)
      - name: List outputs
        if: always()
        run: |
          echo "=== OUTPUT TREE ==="
          find engine/output -maxdepth 3 -type f \( -name "video.mp4" -o -name "thumbnail.jpg" -o -name "*.srt" -o -name "img_*.jpg" \) -print || true

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs-debug
          path: |
            engine/output/**/video.mp4
            engine/output/**/thumbnail.jpg
            engine/output/**/subs.srt
            engine/output/**/img_*.jpg
          if-no-files-found: ignore
          retention-days: 3

      # Chỉ commit state.json
      - name: Persist state (optional)
        if: always()
        run: |
          set -e
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.email "bot@users.noreply.github.com"
          git config user.name "news-bot"
          mkdir -p data
          cp engine/data/state.json data/state.json || true
          git rm -r --cached engine || true
          rm -f .gitmodules || true
          git -c pull.rebase=true -c rebase.autoStash=true pull || true
          git add -f data/state.json || true
          git commit -m "update state [skip ci]" || echo "no changes"
          git push || true
