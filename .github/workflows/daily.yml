name: daily-news-to-youtube

on:
  schedule:
    - cron: "0 10 * * *"      # 17:00 VN mỗi ngày (UTC)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: news2video-daily
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Repo A (orchestrator)
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ===== Secrets bắt buộc =====
      - name: Check required secrets
        run: |
          test -n "${{ secrets.ENGINE_TOKEN }}" || (echo "Missing ENGINE_TOKEN" && exit 1)
          test -n "${{ secrets.GOOGLE_CLIENT_ID }}" || (echo "Missing GOOGLE_CLIENT_ID" && exit 1)
          test -n "${{ secrets.GOOGLE_CLIENT_SECRET }}" || (echo "Missing GOOGLE_CLIENT_SECRET" && exit 1)
          test -n "${{ secrets.YT_REFRESH_TOKEN }}" || (echo "Missing YT_REFRESH_TOKEN" && exit 1)

      # Repo B (engine) – PRIVATE
      - name: Checkout private engine
        uses: actions/checkout@v4
        with:
          repository: tinsleigh1217650-delv/news2video-engine   # ĐỔI nếu khác
          token: ${{ secrets.ENGINE_TOKEN }}
          path: engine
          ref: main
          fetch-depth: 1

      # Deps
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak jq

      - name: Install Python deps
        run: |
          pip install -r engine/requirements.txt
          pip install beautifulsoup4 feedparser lxml

      # ===== Vá BOM & ép utf-8-sig bằng Python (an toàn YAML) =====
      - name: Normalize jp_sources.json (strip BOM)
        run: |
          python - <<'PY'
          import json, io, os, sys, glob, re
          p = 'engine/feeds/jp_sources.json'
          # đọc nuốt BOM
          data = json.load(open(p, 'r', encoding='utf-8-sig'))
          # ghi lại KHÔNG BOM
          open(p, 'w', encoding='utf-8').write(json.dumps(data, ensure_ascii=False, indent=2))
          print("BOM stripped:", p)
          # ép mọi nơi đọc file dùng utf-8-sig
          for f in glob.glob('engine/**/*.py', recursive=True):
              t = open(f, 'r', encoding='utf-8').read()
              if 'jp_sources.json' in t:
                  t2 = re.sub(r'open\\(([^\\)]*jp_sources\\.json[^\\)]*),\\s*[\'"]r[\'"]\\s*\\)',
                              r'open(\\1, "r", encoding="utf-8-sig")', t)
                  t2 = re.sub(r'open\\(([^\\)]*jp_sources\\.json[^\\)]*),\\s*encoding\\s*=\\s*[\'"]utf-8[\'"]\\s*\\)',
                              r'open(\\1, encoding="utf-8-sig")', t2)
                  if t2 != t:
                      open(f, 'w', encoding='utf-8').write(t2)
                      print("patched:", f)
          PY

      - name: Debug sources JSON
        run: |
          echo "=== engine/feeds/jp_sources.json ==="
          cat engine/feeds/jp_sources.json
          python - <<'PY'
          import json
          j = json.load(open('engine/feeds/jp_sources.json','r',encoding='utf-8-sig'))
          print("sources:", len(j.get('sources',[])))
          assert len(j.get('sources',[]))>0
          PY

      # (Tuỳ chọn) kiểm tra token YT
      - name: Verify YouTube token (optional)
        continue-on-error: true
        env:
          CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          RESP=$(curl -sS -X POST https://oauth2.googleapis.com/token \
            -d client_id="$CLIENT_ID" \
            -d client_secret="$CLIENT_SECRET" \
            -d refresh_token="$REFRESH_TOKEN" \
            -d grant_type=refresh_token)
          ACCESS=$(echo "$RESP" | jq -r '.access_token // empty')
          if [ -n "$ACCESS" ]; then
            echo "=== tokeninfo ==="
            curl -sS "https://oauth2.googleapis.com/tokeninfo?access_token=$ACCESS" | jq .
          else
            echo "WARN: cannot get access token now"
          fi

      # Preflight phải tìm thấy >=1 bài có >=3 ảnh
      - name: Preflight JP feed (>=3 images)
        working-directory: engine
        env:
          PYTHONPATH: ${{ github.workspace }}/engine
          FEED_MODE: "JP"
          MIN_IMAGES: "3"
        run: |
          python tools/preflight_jp.py

      # Chạy pipeline
      - name: Run pipeline
        working-directory: engine
        env:
          PYTHONPATH: ${{ github.workspace }}/engine

          # YouTube OAuth
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # Upload private (bản nháp)
          YT_PRIVACY: "private"

          # Nhật + yêu cầu ảnh
          FEED_MODE: "JP"
          MIN_IMAGES: "3"
          ALLOW_FALLBACK: "0"

          # Voice & audio
          PIPER_EN_VOICE: en_US-libritts-high
          PIPER_HOST_VOICE: en_US-lessac-medium
          AUTO_LENGTH_SCALE: "false"
          PIPER_LENGTH_SCALE_BASE: "1.02"
          HOST_LENGTH_SCALE: "1.06"
          PAUSE_AFTER_INTRO: "0.6"
          PAUSE_BETWEEN_SEGS: "0.35"
          LOUDNORM_I: "-14"
          LOUDNORM_TP: "-1.5"
          LOUDNORM_LRA: "11"
          USE_DEESSER: "true"
          MUSIC_BED_DB: "-28"

          # Pipeline
          MAX_IMAGES: 12
          MAX_DAILY_VIDEOS: 1
          PICK_WINDOW: 20
        run: python run.py

      # Chặn fallback NASA => fail sớm để khỏi up video đen
      - name: Guard NASA fallback
        if: always()
        run: |
          if find engine/output -maxdepth 2 -type d -name "nasa-developed-printable-metal-can-take-the-heat" | grep -q .; then
            echo "::error::NASA fallback detected -> failing job."
            exit 1
          fi

      # Artifacts để bạn kiểm tra
      - name: List outputs
        if: always()
        run: |
          echo "=== OUTPUT TREE ==="
          find engine/output -maxdepth 3 -type f \( -name "video.mp4" -o -name "thumbnail.jpg" -o -name "*.srt" -o -name "img_*.jpg" \) -print || true

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs-debug
          path: |
            engine/output/**/video.mp4
            engine/output/**/thumbnail.jpg
            engine/output/**/subs.srt
            engine/output/**/img_*.jpg
          if-no-files-found: ignore
          retention-days: 3

      # Lưu state (nếu có)
      - name: Persist state (optional)
        if: always()
        run: |
          set -e
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.email "bot@users.noreply.github.com"
          git config user.name "news-bot"
          mkdir -p data
          cp engine/data/state.json data/state.json || true
          git add -f data/state.json || true
          git commit -m "update state [skip ci]" || echo "no changes"
          git push || true
